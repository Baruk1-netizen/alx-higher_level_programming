{"payload":{"allShortcutsEnabled":true,"path":"0x09-python-everything_is_object","repo":{"id":711826041,"defaultBranch":"main","name":"alx-higher_level_programming","ownerLogin":"waltertaya","currentUserCanPush":false,"isFork":false,"isEmpty":false,"createdAt":"2023-10-30T11:53:06.000+03:00","ownerAvatar":"https://avatars.githubusercontent.com/u/126944679?v=4","public":true,"private":false,"isOrgOwned":false},"currentUser":{"id":134915896,"login":"Baruk1-netizen","userEmail":"baruk75g@gmail.com"},"refInfo":{"name":"main","listCacheKey":"v0:1698656566.0","canEdit":true,"refType":"branch","currentOid":"c7d9b65498147e5d3620af87c7f9aeba0eb740a1"},"tree":{"items":[{"name":"0-answer.txt","path":"0x09-python-everything_is_object/0-answer.txt","contentType":"file"},{"name":"1-answer.txt","path":"0x09-python-everything_is_object/1-answer.txt","contentType":"file"},{"name":"10-answer.txt","path":"0x09-python-everything_is_object/10-answer.txt","contentType":"file"},{"name":"100-magic_string.py","path":"0x09-python-everything_is_object/100-magic_string.py","contentType":"file"},{"name":"11-answer.txt","path":"0x09-python-everything_is_object/11-answer.txt","contentType":"file"},{"name":"12-answer.txt","path":"0x09-python-everything_is_object/12-answer.txt","contentType":"file"},{"name":"13-answer.txt","path":"0x09-python-everything_is_object/13-answer.txt","contentType":"file"},{"name":"14-answer.txt","path":"0x09-python-everything_is_object/14-answer.txt","contentType":"file"},{"name":"15-answer.txt","path":"0x09-python-everything_is_object/15-answer.txt","contentType":"file"},{"name":"16-answer.txt","path":"0x09-python-everything_is_object/16-answer.txt","contentType":"file"},{"name":"17-answer.txt","path":"0x09-python-everything_is_object/17-answer.txt","contentType":"file"},{"name":"18-answer.txt","path":"0x09-python-everything_is_object/18-answer.txt","contentType":"file"},{"name":"19-copy_list.py","path":"0x09-python-everything_is_object/19-copy_list.py","contentType":"file"},{"name":"2-answer.txt","path":"0x09-python-everything_is_object/2-answer.txt","contentType":"file"},{"name":"20-answer.txt","path":"0x09-python-everything_is_object/20-answer.txt","contentType":"file"},{"name":"21-answer.txt","path":"0x09-python-everything_is_object/21-answer.txt","contentType":"file"},{"name":"22-answer.txt","path":"0x09-python-everything_is_object/22-answer.txt","contentType":"file"},{"name":"23-answer.txt","path":"0x09-python-everything_is_object/23-answer.txt","contentType":"file"},{"name":"24-answer.txt","path":"0x09-python-everything_is_object/24-answer.txt","contentType":"file"},{"name":"25-answer.txt","path":"0x09-python-everything_is_object/25-answer.txt","contentType":"file"},{"name":"26-answer.txt","path":"0x09-python-everything_is_object/26-answer.txt","contentType":"file"},{"name":"27-answer.txt","path":"0x09-python-everything_is_object/27-answer.txt","contentType":"file"},{"name":"28-answer.txt","path":"0x09-python-everything_is_object/28-answer.txt","contentType":"file"},{"name":"3-answer.txt","path":"0x09-python-everything_is_object/3-answer.txt","contentType":"file"},{"name":"4-answer.txt","path":"0x09-python-everything_is_object/4-answer.txt","contentType":"file"},{"name":"5-answer.txt","path":"0x09-python-everything_is_object/5-answer.txt","contentType":"file"},{"name":"6-answer.txt","path":"0x09-python-everything_is_object/6-answer.txt","contentType":"file"},{"name":"7-answer.txt","path":"0x09-python-everything_is_object/7-answer.txt","contentType":"file"},{"name":"8-answer.txt","path":"0x09-python-everything_is_object/8-answer.txt","contentType":"file"},{"name":"9-answer.txt","path":"0x09-python-everything_is_object/9-answer.txt","contentType":"file"},{"name":"README.md","path":"0x09-python-everything_is_object/README.md","contentType":"file"}],"templateDirectorySuggestionUrl":null,"readme":{"displayName":"README.md","richText":"<article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><h1 tabindex=\"-1\" dir=\"auto\"><a id=\"user-content-0x09-python-everything_is_object\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#0x09-python-everything_is_object\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>0x09-python-everything_is_object</h1>\n<h2 tabindex=\"-1\" dir=\"auto\"><a id=\"user-content-912-cloning-lists\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#912-cloning-lists\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>9.12. Cloning lists</h2>\n<p dir=\"auto\">If we want to modify a list and also keep a copy of the original, we need to be able to make a copy of the list itself, not just the reference. This process is sometimes called cloning, to avoid the ambiguity of the word copy.\n<code>&gt;&gt;&gt; a = [1, 2, 3] &gt;&gt;&gt; b = a[:] &gt;&gt;&gt; print b [1, 2, 3]</code></p>\n<h2 tabindex=\"-1\" dir=\"auto\"><a id=\"user-content-enumerations\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#enumerations\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>enumerations</h2>\n<p dir=\"auto\"><code>numbers = [1, 2, 3, 4, 5] for index in range(len(numbers)): numbers[index] = numbers[index]**2</code></p>\n<p dir=\"auto\">same as</p>\n<p dir=\"auto\"><code>numbers = [1, 2, 3, 4, 5] for index, value in enumerate(numbers): numbers[index] = value**2</code></p>\n<ul dir=\"auto\">\n<li>enumerate generates both the index and the value associated with it during the list traversal. Try this next example to see more clearly how enumerate works:</li>\n</ul>\n<h2 tabindex=\"-1\" dir=\"auto\"><a id=\"user-content-914-list-parameters\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#914-list-parameters\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>9.14. List parameters</h2>\n<p dir=\"auto\">Passing a list as an argument actually passes a reference to the list, not a copy of the list. Since lists are mutable changes made to the parameter change the argument as well. For example, the function below takes a list as an argument and multiplies each element in the list by 2:</p>\n<p dir=\"auto\">Functions which take lists as arguments and change them during execution are called modifiers and the changes they make are called side effects.</p>\n<p dir=\"auto\">A pure function does not produce side effects. It communicates with the calling program only through parameters, which it does not modify, and a return value. Here is double_stuff written as a pure function:</p>\n<h2 tabindex=\"-1\" dir=\"auto\"><a id=\"user-content-919-test-driven-development-tdd\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#919-test-driven-development-tdd\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>9.19. Test-driven development (TDD)Â¶</h2>\n<p dir=\"auto\">Test-driven development (TDD) is a software development practice which arrives at a desired feature through a series of small, iterative steps motivated by automated tests which are written first that express increasing refinements of the desired feature.</p>\n<p dir=\"auto\">Doctest enables us to easily demonstrate TDD. Letâs say we want a function which creates a rows by columns matrix given arguments for rows and columns.</p>\n<p dir=\"auto\">We first setup a test for this function in a file named matrices.py:\n<code>def make_matrix(rows, columns): \"\"\" &gt;&gt;&gt; make_matrix(3, 5) [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]] \"\"\" if __name__ == '__main__': import doctest doctest.testmod()</code></p>\n<h2 tabindex=\"-1\" dir=\"auto\"><a id=\"user-content-920-strings-and-lists\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#920-strings-and-lists\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>9.20. Strings and lists</h2>\n<p dir=\"auto\">Python has a command called list that takes a sequence type as an argument and creates a list out of its elements.\n<code>&gt;&gt;&gt; list(\"Crunchy Frog\") ['C', 'r', 'u', 'n', 'c', 'h', 'y', ' ', 'F', 'r', 'o', 'g']</code></p>\n<p dir=\"auto\">There is also a str command that takes any Python value as an argument and returns a string representation of it.</p>\n<p dir=\"auto\">As we can see from the last example, str canât be used to join a list of characters together. To do this we could use the join function in the string module:</p>\n<p dir=\"auto\">Two of the most useful functions in the string module involve lists of strings. The split function breaks a string into a list of words. By default, any number of whitespace characters is considered a word boundary:\nstring.join is the inverse of string.split. It takes two arguments: a list of strings and a separator which will be placed between each element in the list in the resultant string.</p>\n<h2 tabindex=\"-1\" dir=\"auto\"><a id=\"user-content-921-glossary\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#921-glossary\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>9.21. Glossary</h2>\n<ol dir=\"auto\">\n<li>aliases -\nMultiple variables that contain references to the same object.</li>\n<li>clone -\nTo create a new object that has the same value as an existing object. Copying a reference to an object creates an alias but doesnât clone the object.</li>\n<li>delimiter -\nA character or string used to indicate where a string should be split.</li>\n<li>element -\nOne of the values in a list (or other sequence). The bracket operator selects elements of a list.</li>\n<li>index -\nAn integer variable or value that indicates an element of a list.</li>\n<li>list -\nA named collection of objects, where each object is identified by an index.</li>\n<li>list traversal -\nThe sequential accessing of each element in a list.</li>\n<li>modifier -\nA function which changes its arguments inside the function body. Only mutable types can be changed by modifiers.</li>\n<li>mutable type -\nA data type in which the elements can be modified. All mutable types are compound types. Lists are mutable data types; strings are not.</li>\n<li>nested list -\nA list that is an element of another list.</li>\n<li>object -\nA thing to which a variable can refer.</li>\n<li>pure function -\nA function which has no side effects. Pure functions only make changes to the calling program through their return values.</li>\n<li>sequence -\nAny of the data types that consist of an ordered set of elements, with each element identified by an index.</li>\n<li>side effect -\nA change in the state of a program made by calling a function that is not a result of reading the return value from the function. Side effects can only be produced by modifiers.</li>\n<li>step size -\nThe interval between successive elements of a linear sequence. The third (and optional argument) to the range function is called the step size. If not specified, it defaults to 1.</li>\n<li>test-driven development (TDD) -\nA software development practice which arrives at a desired feature through a series of small, iterative steps motivated by automated tests which are written first that express increasing refinements of the desired feature. (see the Wikipedia article on Test-driven development for more information.)</li>\n</ol>\n<h2 tabindex=\"-1\" dir=\"auto\"><a id=\"user-content-241---the-object-metaphor\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#241---the-object-metaphor\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>2.4.1   The Object Metaphor</h2>\n<p dir=\"auto\">nest = list(suits)\n<code>from unicodedata import lookup [lookup('WHITE ' + s.upper() + ' SUIT') for s in suits] ['â¡', 'â¢', 'â¤', 'â§']</code></p>\n</article>","errorMessage":null,"headerInfo":{"toc":[{"level":1,"text":"0x09-python-everything_is_object","anchor":"0x09-python-everything_is_object","htmlText":"0x09-python-everything_is_object"},{"level":2,"text":"9.12. Cloning lists","anchor":"912-cloning-lists","htmlText":"9.12. Cloning lists"},{"level":2,"text":"enumerations","anchor":"enumerations","htmlText":"enumerations"},{"level":2,"text":"9.14. List parameters","anchor":"914-list-parameters","htmlText":"9.14. List parameters"},{"level":2,"text":"9.19. Test-driven development (TDD)Â¶","anchor":"919-test-driven-development-tdd","htmlText":"9.19. Test-driven development (TDD)Â¶"},{"level":2,"text":"9.20. Strings and lists","anchor":"920-strings-and-lists","htmlText":"9.20. Strings and lists"},{"level":2,"text":"9.21. Glossary","anchor":"921-glossary","htmlText":"9.21. Glossary"},{"level":2,"text":"2.4.1   The Object Metaphor","anchor":"241---the-object-metaphor","htmlText":"2.4.1   The Object Metaphor"}],"siteNavLoginPath":"/login?return_to=https%3A%2F%2Fgithub.com%2Fwaltertaya%2Falx-higher_level_programming%2Ftree%2Fmain%2F0x09-python-everything_is_object"}},"totalCount":31,"showBranchInfobar":false},"fileTree":{"":{"items":[{"name":"0x00-python-hello_world","path":"0x00-python-hello_world","contentType":"directory"},{"name":"0x01-python-if_else_loops_functions","path":"0x01-python-if_else_loops_functions","contentType":"directory"},{"name":"0x02-python-import_modules","path":"0x02-python-import_modules","contentType":"directory"},{"name":"0x03-python-data_structures","path":"0x03-python-data_structures","contentType":"directory"},{"name":"0x04-python-more_data_structures","path":"0x04-python-more_data_structures","contentType":"directory"},{"name":"0x05-python-exceptions","path":"0x05-python-exceptions","contentType":"directory"},{"name":"0x06-python-classes","path":"0x06-python-classes","contentType":"directory"},{"name":"0x07-python-test_driven_development","path":"0x07-python-test_driven_development","contentType":"directory"},{"name":"0x08-python-more_classes","path":"0x08-python-more_classes","contentType":"directory"},{"name":"0x09-python-everything_is_object","path":"0x09-python-everything_is_object","contentType":"directory"},{"name":"README.md","path":"README.md","contentType":"file"}],"totalCount":11}},"fileTreeProcessingTime":1.941331,"foldersToFetch":[],"treeExpanded":true,"symbolsExpanded":false,"csrf_tokens":{"/waltertaya/alx-higher_level_programming/branches":{"post":"6xr20vBy5b7VpJqOT4jM43FAswfgNTPxUu36H2edsixFh1UApzJFh9eBxXY06YcmVCxeThC1RmUdCtCI1M-z5Q"},"/waltertaya/alx-higher_level_programming/branches/fetch_and_merge/main":{"post":"v8oGyIkTP5Xl7_pNvfcdrQ5Rqzh8irF2ceyiKVGch2DmSMocIPo0YS8Rnd5QrHal2cstrmjj9oruc3-hrsPKMQ"},"/waltertaya/alx-higher_level_programming/branches/fetch_and_merge/main?discard_changes=true":{"post":"fxRSyYyAm89ce84mQRiMXUYRznYM_RKWobul_axmfwsmlp4dJWmQO5aFqbWsQ-dVkYtI4BiUVWo-JHh1UzkyWg"}}},"title":"alx-higher_level_programming/0x09-python-everything_is_object at main Â· waltertaya/alx-higher_level_programming"}